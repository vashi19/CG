import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D from mpl
_toolkits.mplot3d.art3d import Poly3DCollection
# Function to draw 3D objects and their transformations
def draw 3d _objects(objects, transformations, titles):
fig - plt. figure figsize=(15, 5))
for i, (obj, trans, title) in enumerate(zip(objects, transformations, titles)):
ax = fig.add_subplot(1, len(objects), i+1, projection=3d)
ax.set
_title(title)
# Plot original object
ax.add_collection3d(Poly3DCollection([obj], color-"blue', alpha=0.5))
# Apply transformation
transformed_obj = np.dot(trans, np.vstack((obj.T, np.ones (len(obj)))))[:3, :]
# Plot transformed object
ax. add _collection3d(Poly3DCollection (transformed _obj.T], color-'red', alpha-0.5))
# Set axes limits and labels
ax.set
_xlim (L-5, 5])
ax.set_ylim ([-5, 5])
ax.set_zlim(L-5, 5])
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel(2)
ax. grid(True)
# Plot origin
ax. scatter(0, 0, 0, color-'black', s=50)
plt.tight_layout
plt.show)
# Define basic 3D objects
cube = np. array([[O, 0, 0], [1, 0, 0], [L, 1, 01, [O, 1, 01,
[0, 0, 11, [1, 0, 11, [1, 1, 11, [O, 1, 1]1)
pyramid = np.array([[0.5, 0.5, 01, [0, 1, 01, [1, 1, 01,
[0.25, 0.75, 11, [0.75, 0.75, 11, [0.5, 0.5, 2]])
scaling_ matrix = np.array([2, 0, 0, 0],
[0, 2, 0, 0],
[0, 0, 2, 01,
[0, 0, 0, 111) # Scaling by a factor of 2
shearing_matrix = np. array([[1, 0.5, 0, 0],
[0.5, 1, 0, 0], [O, 0, 1, 01,
[0, 0, 0, 1]1) # Shearing by factor of 0.5
translation_ matrix = np.array([[1, 0, 0, 2],
[0, 1, 0, - 11,
[0, 0, 1, 11,
[O, 0, 0, 1]]) # Translation by (2, -1, 1)
theta = np.pi / 4 # Rotation angle (45 degrees)
rotation_ matrix = np.array([[mp.costheta), -np.sin(theta), 0, 0],
Imp.sin (theta), np.cos(theta), 0, 0],
[0, 0, 1, 0],
[O, 0, 0, 111) # Rotation by 45 degrees around Z axis
# Apply transformations
objects = [cube, pyramid]
transformations = [translation matrix, rotation_ matrix]
titles = ['Translation', 'Rotation]
draw_30.
_objects (objects, transformations, titles)
# Apply transformations
objects = [cube, pyramid
transformations = [scaling_ matrix, shearing_matrix]
titles = ['Scaling', 'Shearing]
draw_3d_objects(objects, transformations, titles)
